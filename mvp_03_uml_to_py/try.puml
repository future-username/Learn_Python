plantuml
@startuml "Пример диаграммы классов"

' Заголовок и настройки
title Пример комплексной диаграммы классов
skinparam classAttributeIconSize 0
skinparam backgroundColor #FEFEFE
skinparam roundcorner 10
skinparam classFontStyle bold
skinparam classFontSize 14

' Пакеты
package "Core" #DDEBFF {
  ' Абстрактный класс
  abstract class AbstractEntity {
    #id: UUID
    #createdAt: LocalDateTime
    #updatedAt: LocalDateTime
    +getId(): UUID
    +getCreatedAt(): LocalDateTime
    +{abstract} validate(): boolean
  }

  ' Интерфейс
  interface Serializable {
    +serialize(): String
    +deserialize(data: String): Object
  }

  ' Перечисление
  enum Status {
    ACTIVE
    PENDING
    ARCHIVED
    DELETED
    +isActive(): boolean
  }

  ' Аннотация
  annotation Entity
}

package "Domain" #FFEBDD {
  ' Обычный класс с атрибутами и методами
  class User {
    -username: String
    -email: String
    -passwordHash: String
    -role: Role
    -status: Status
    -lastLogin: LocalDateTime
    +User(username: String, email: String)
    +getUsername(): String
    +setUsername(username: String): void
    +authenticate(password: String): boolean
    +{static} findByEmail(email: String): User
    ~resetPassword(): String
    #generatePasswordResetToken(): String
    -hashPassword(password: String): String
  }

  ' Класс с шаблоном
  class Repository<T> {
    -dataSource: DataSource
    +find(id: UUID): T
    +save(entity: T): boolean
    +delete(id: UUID): boolean
    +query(filter: Map<String, Object>): List<T>
  }

  ' Ещё один класс
  class Order {
    -orderNumber: String
    -items: List<OrderItem>
    -customer: User
    -status: OrderStatus
    -totalAmount: BigDecimal
    +calculateTotal(): BigDecimal
    +addItem(item: OrderItem): void
    +removeItem(itemId: UUID): boolean
    +process(): boolean
  }

  ' Перечисление в домене
  enum OrderStatus {
    NEW
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    +canCancel(): boolean
  }
}

package "Infrastructure" #DDFFEB {
  class UserRepository {
    -connectionPool: ConnectionPool
    +findActiveUsers(): List<User>
    +deactivateInactiveUsers(days: int): int
  }

  class EmailService {
    -smtpConfig: SmtpConfig
    -templates: Map<String, String>
    +sendWelcomeEmail(user: User): boolean
    +sendPasswordReset(user: User, token: String): boolean
    -formatMessage(template: String, params: Map<String, String>): String
  }
}

' Отношения между классами
AbstractEntity <|-- User : extends
Serializable <|.. User : implements
User "1" *-- "many" Order : places >
Order "1" o-- "many" OrderItem : contains >
User "*" -- "1" Status : has >
Repository <|-- UserRepository : extends
Entity .. User : annotates >
Order -- OrderStatus : has >

' Заметки
note top of User
  Центральный класс в системе,
  представляет пользователя
end note

note right of Repository
  Обобщенный репозиторий для
  работы с сущностями
end note

@enduml